{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ezra Heinberg's COMP 423 Course Notes!","text":"<p>This is my home page. Go check out the Rust tutorial!</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li> <p>Primary author: Ezra Heinberg</p> </li> <li> <p>Reviewer: Lixin Yang</p> </li> </ul> <p>Note</p> <p>Certain steps in this tutorial will be quoted and/or paraphrased from the COMP 423 MkDocs tutorial page</p> <p>Hello and welcome! This tutorial will teach you how to set up a basic Rust project in a development container. Just follow along with the steps, and enjoy the process!</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before you start, be sure you have:</p> <ol> <li>An account on GitHub: If not, sign up for one on GitHub.</li> <li>Git installed: You can install it here.</li> <li>VSCode installed: Download here.</li> <li>Docker installed: Install it here.</li> <li>A general familiarity with the command line: This will be helpful as you navigate this tutorial.</li> </ol>"},{"location":"tutorials/rust-setup/#part-1-creating-the-repository","title":"Part 1: Creating the Repository","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1. Create a Local Directory and Initialize Git","text":"<p>(1) Open your terminal or command prompt.</p> <p>(2) Create a new directory for your project.</p> <pre><code>mkdir rust-tutorial\ncd rust-tutorial\n</code></pre> <p>(3) Initialize a new Git repository:</p> <pre><code>git init\n</code></pre> <p>(4) Create a README file:</p> <pre><code>echo \"# Basic Program in Rust\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2. Create a Remote Repository on GitHub","text":"<p>(1) Log in to your GitHub account and go to the Create a New Repository page.</p> <p>(2) Fill in these details:</p> <ul> <li>Repository Name: <code>rust-tutorial</code></li> <li>Description: \"A short program written in Rust!\"</li> <li>Visibility: Public</li> </ul> <p>(3) Do not worry about a README, .gitignore, or license for now.</p> <p>(4) Click Create Repository.</p>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3. Link your Local Repository to GitHub","text":"<p>(1) Add the GitHub repository as a remote:</p> <p><pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-tutorial.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(2) Check your default branch name with the subcommand <code>git branch</code>. If it's not <code>main</code>, rename it to <code>main</code> with the following command: <code>git branch -M main</code>.</p> <p>(3) Push your local commits to the GitHub repo:</p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Info</p> <p>What is <code>--set-upstream</code>?</p> <p><code>git push --set-upstream origin main</code> pushes the main branch to the remote repository origin. The <code>--set-upstream</code> flag sets up the main branch to track the remote branch, meaning future pushes and pulls can be done without specifying the branch name and just writing <code>git push origin</code> when working on your local <code>main</code> branch. The corresponding short flag is <code>-u</code>.</p> <p>(4) In your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use <code>git log</code> locally to see the commit ID and message which should match the ID of the most recent commit on GitHub.</p>"},{"location":"tutorials/rust-setup/#part-2-setting-up-a-dev-container","title":"Part 2: Setting up a Dev Container","text":"<p>A development container is useful to ensure that your development environment is consistent across different machines. Follow the steps below to configure and create one. </p>"},{"location":"tutorials/rust-setup/#step-1-add-dev-container-configuration","title":"Step 1: Add Dev Container Configuration","text":"<p>(1) Open the <code>rust-tutorial</code> folder in VSCode via File &gt; Open Folder.</p> <p>(2) Press <code>Ctrl-Shift-P</code> (<code>Cmd-Shift-P</code> on Mac) and search for Dev Containers: Add Dev Container Configuration Files.</p> <p>(3) Select Add configuration to workspace.</p> <p>(4) Search for and click Rust.</p> <p>(5) Select bullseye.</p> <p>(6) Click OK (top right corner) until your <code>.json</code> file is created.</p> <p>(4) A <code>devcontainer.json</code> file is now added to your folder.</p>"},{"location":"tutorials/rust-setup/#step-2-customizing-dev-container-for-your-project","title":"Step 2: Customizing Dev Container for Your Project","text":"<p>When you create the <code>.json</code> file, it should look like this: </p> <pre><code>// For format details, see https://aka.ms/devcontainer.json. For config options, see the\n// README at: https://github.com/devcontainers/templates/tree/main/src/rust\n{\n    \"name\": \"Rust\",\n    // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:1-1-bullseye\",\n\n    // Use 'mounts' to make the cargo cache persistent in a Docker Volume.\n    // \"mounts\": [\n    //  {\n    //      \"source\": \"devcontainer-cargo-cache-${devcontainerId}\",\n    //      \"target\": \"/usr/local/cargo\",\n    //      \"type\": \"volume\"\n    //  }\n    // ]\n\n    // Features to add to the dev container. More info: https://containers.dev/features.\n    // \"features\": {},\n\n    // Use 'forwardPorts' to make a list of ports inside the container available locally.\n    // \"forwardPorts\": [],\n\n    // Use 'postCreateCommand' to run commands after the container is created.\n    // \"postCreateCommand\": \"rustc --version\",\n\n    // Configure tool-specific properties.\n    // \"customizations\": {},\n\n    // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n    // \"remoteUser\": \"root\"\n}\n</code></pre> <p>We are going to add some things to the file.</p> <p>(1) Uncomment out the <code>customizations</code> section and edit it to look like this: </p> <p><pre><code>\"customizations\": {\n    \"vscode\": {\n        \"extensions\": [\n            \"rust-lang.rust-analyzer\"\n        ]\n    }\n}\n</code></pre> (Make sure you add a comma on the <code>\"image\"</code> line of the file!)</p> <p>(2) Uncomment out the line that says <code>\"postCreateCommand\": \"rustc --version\",</code></p> <p>(3) Now, press <code>Ctrl-Shift-P</code> (<code>Cmd-Shift-P</code> on Mac), search for Dev Containers: Reopen In Container and click on it.</p>"},{"location":"tutorials/rust-setup/#part-3-your-first-rust-program","title":"Part 3: Your first Rust program","text":"<p>Congratulations on making it this far! You will now create your first program in Rust.</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-mainrs-file","title":"Step 1: Create a <code>main.rs</code> file","text":"<p>(1) Open a new terminal in VSCode and run this command:</p> <pre><code>cargo new rs-tutorial --bin --vcs none\n</code></pre> <p>Info</p> <p>What does this mean?</p> <p>The command <code>cargo new rs-tutorial --bin --vcs none</code> creates a new Rust project using the Cargo package manager. <code>rs-tutorial</code> is the name of the directory your <code>main.rs</code> file will be placed in. The <code>--bin</code> flag specifies that the project being created is a binary crate, which means it will compile into an executable program. The <code>--vcs none</code> flag disables version control system (VCS) initialization.</p> <p>(2) Navigate to the <code>main.rs</code> file (<code>rs-tutorial</code> folder &gt; <code>src</code> folder &gt; <code>main.rs</code>).</p> <p>You will notice the file already has some prewritten code in it. This is a simple function that prints \"Hello, World!\" to standard output.</p> <p>(3) Simply change the text within the <code>println!();</code> function to <code>\"Hello COMP423\"</code>, save the file, and you're done with this part!</p>"},{"location":"tutorials/rust-setup/#step-2-compiling-and-running-the-program","title":"Step 2: Compiling and running the program","text":"<p>Now that your program is ready to be run, we will look at two different ways of accomplishing that. To start, run <code>cd rs-tutorial</code>. </p>"},{"location":"tutorials/rust-setup/#1-the-cargo-build-command","title":"(1) The <code>cargo build</code> command","text":"<p>The <code>cargo build</code> command compiles your project but does not run the executable that results.</p> <p>This is useful if you want to check that your code compiles correctly without executing it.</p> <p>This is equivalent to running <code>gcc</code> to compile a program and stopping after the <code>a.out</code> executable is created.</p> <p>To try it out, run <code>cargo build</code> in your terminal in VSCode.</p> <p>You will see output that looks like this: </p> <pre><code>Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.01s\n</code></pre> <p>To run it, type this command: <code>./target/debug/rs-tutorial</code>.</p>"},{"location":"tutorials/rust-setup/#2-the-cargo-run-command","title":"(2) The <code>cargo run</code> command","text":"<p>The <code>cargo run</code> command compiles and builds your Rust program in one step.</p> <p>This is equivalent to running <code>gcc</code> to compile a program and subsequently running <code>./a.out</code>.</p> <p>To try it out, run <code>cargo run</code> in your terminal in VSCode.</p>"},{"location":"tutorials/rust-setup/#part-4-pushing-your-work-to-github","title":"Part 4: Pushing Your Work to GitHub","text":"<p>If you wish to push your work to GitHub, run these commands in the terminal:</p> <pre><code>git add .\ngit commit -m \"Hello COMP423 in Rust\"\ngit push -u origin main\n</code></pre> <p>Congratulations on finishing this tutorial! You should now have a familiarity with some important coding concepts.</p>"}]}